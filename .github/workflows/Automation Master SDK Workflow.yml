name: Automation Master Workflow

on:
  workflow_call:
    outputs:
      quality_gate:
        description: "Results from Skyline Quality Gate."
        value: ${{ jobs.validate_skyline_quality_gate.outputs.quality }}

    inputs:
      # Optional OIDC inputs in case outside SkylineCommunications organization
      oidc-client-id:
        required: false
        type: string
      oidc-tenant-id:
        required: false
        type: string
      oidc-subscription-id:
        required: false
        type: string
      use-oidc:
        required: false
        type: string

      sonarCloudProjectName:
        required: true
        type: string
      debug:
        required: false
        type: boolean

    secrets:
      api-key:
        required: false
      sonarCloudToken:
        required: false
      azureToken:
        required: false

jobs:
  validate_skyline_quality_gate:
    name: SDK Skyline Quality Gate 
    runs-on: windows-latest
    env:
      detected-unit-tests: none
    outputs:
      quality: ${{ steps.quality-step.outputs.results }}
    steps:
      - name: Azure Login
        uses: azure/login@v2
        if: inputs.use-oidc == 'true'
        with:
          client-id: ${{ inputs.oidc-client-id }}
          tenant-id: ${{ inputs.oidc-tenant-id }}
          subscription-id: ${{ inputs.oidc-subscription-id }}

      - name: Retrieve needed secrets from Azure Key Vault
        if: inputs.use-oidc == 'true'
        shell: bash
        run: |
          echo "Fetching secrets from Azure Key Vault..."

          # List of secret names needed for this job
          secret_names=("azure-token" "sonar-token")

          for secret_name in "${secret_names[@]}"; do
            # Convert to uppercase and replace hyphens with underscores
            env_var_name=$(echo "$secret_name" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

            # Retrieve the secret value
            secret_value=$(az keyvault secret show --vault-name kv-master-cicd-secrets --name "$secret_name" --query value -o tsv)

            # Mask the secret value
            echo "::add-mask::$secret_value"

            # Export as environment variable
            echo "$env_var_name=$secret_value" >> "$GITHUB_ENV"
          done

      - name: Overwrite default secrets with user-defined secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.azureToken }}" ]]; then
            echo "Using provided azureToken secret"
            echo "AZURE_TOKEN=${{ secrets.azureToken }}" >> "$GITHUB_ENV"
          fi

          if [[ -n "${{ secrets.sonarCloudToken }}" ]]; then
            echo "Using provided sonarCloudToken secret"
            echo "SONAR_TOKEN=${{ secrets.sonarCloudToken }}" >> "$GITHUB_ENV"
          fi

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Find .sln file
        id: findSlnFile
        run: |
          echo solutionFilePath=$(find . -type f -name '*.sln') >> $GITHUB_OUTPUT
        shell: bash

      - name: Enable Skyline NuGet Registries
        if: github.repository_owner == 'SkylineCommunications'
        run: |
          $sources = @(
            @{ Name = "PrivateGitHubNugets"; URL = "https://nuget.pkg.github.com/SkylineCommunications/index.json"; Username = "USERNAME"; Password = "${{ secrets.GITHUB_TOKEN }}" },
            @{ Name = "CloudNuGets"; URL = "https://pkgs.dev.azure.com/skyline-cloud/Cloud_NuGets/_packaging/CloudNuGet/nuget/v3/index.json"; Username = "az"; Password = "${{ env.AZURE_TOKEN }}" },
            @{ Name = "PrivateAzureNuGets"; URL = "https://pkgs.dev.azure.com/skyline-cloud/_packaging/skyline-private-nugets/nuget/v3/index.json"; Username = "az"; Password = "${{ env.AZURE_TOKEN }}" }
          )

          foreach ($source in $sources) {
            if ($source.Password -ne "") {
              Write-Host "Checking source $($source.Name)..."

              if (dotnet nuget list source | Select-String -Pattern $source.Name) {
                Write-Host "Updating existing source $($source.Name)."
                dotnet nuget update source $source.Name --source $source.URL --username $source.Username --password $source.Password --store-password-in-clear-text
              } else {
                Write-Host "Adding new source $($source.Name)."
                dotnet nuget add source $source.URL --name $source.Name --username $source.Username --password $source.Password --store-password-in-clear-text
              }
            } else {
              Write-Host "Skipping $($source.Name) because the password is not set."
            }
          }
        shell: pwsh

      - name: Install .NET Tools
        run: |
          dotnet tool install -g dotnet-sonarscanner
          dotnet tool install -g Skyline.DataMiner.CICD.Tools.Sbom --version 1.0.*

      - name: Prepare SonarCloud Variables
        id: prepSonarCloudVar
        run: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
              myfile.write("lowerCaseOwner=" + str.lower("${{ github.repository_owner }}"))
        shell: python

      - name: Get SonarCloud Status
        id: get-sonarcloud-status
        run: |
          sonarCloudProjectStatus=$(curl -s -u "${{ env.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ inputs.sonarCloudProjectName }}")

          # Check if the response is empty or not valid JSON
          if [ -z "$sonarCloudProjectStatus" ] || ! echo "$sonarCloudProjectStatus" | jq . > /dev/null 2>&1; then
            echo "Error: The SONAR_TOKEN is invalid, expired, or the response is empty. Please check: https://sonarcloud.io/account/security and update your token: https://github.com/${{ github.repository }}/settings/secrets/actions" >&2
            echo "Returned response: $sonarCloudProjectStatus" >&2
            exit 1
          fi

          # Output the JSON response if valid
          echo "Returned response: $sonarCloudProjectStatus"
          echo "sonarCloudProjectStatus=$sonarCloudProjectStatus" >> $GITHUB_OUTPUT
        continue-on-error: false
        shell: bash

      - name: Trigger Initial Analysis
        if: fromJson(steps.get-sonarcloud-status.outputs.sonarCloudProjectStatus).projectStatus.status  == 'NONE'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: |
            dotnet sonarscanner begin `
              /k:"${{ inputs.sonarCloudProjectName }}" `
              /o:"${{ env.lowerCaseOwner }}" `
              /d:sonar.token="${{ env.SONAR_TOKEN }}" `
              /d:sonar.host.url="https://sonarcloud.io" `
              /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" `
              /d:sonar.cs.vstest.reportsPaths="**/TestResults/**.trx" `
              /d:sonar.exclusions="**/*.yml,**/*.xml"
            dotnet build "${{ steps.findSlnFile.outputs.solutionFilePath }}" -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false
            dotnet sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN  }}"
        continue-on-error: true

      - name: Start Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: |
            dotnet sonarscanner begin `
              /k:"${{ inputs.sonarCloudProjectName }}" `
              /o:"${{ env.lowerCaseOwner }}" `
              /d:sonar.token="${{ env.SONAR_TOKEN }}" `
              /d:sonar.host.url="https://sonarcloud.io" `
              /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" `
              /d:sonar.cs.vstest.reportsPaths="**/TestResults/**.trx" `
              /d:sonar.exclusions="**/*.yml,**/*.xml"
        continue-on-error: true

      - name: Building
        run: dotnet build "${{ steps.findSlnFile.outputs.solutionFilePath }}" -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false

      - name: Unit Tests
      # when not using MSTest you'll need to install coverlet.collector nuget in your test solutions
        id: unit-tests
        run: dotnet test "${{ steps.findSlnFile.outputs.solutionFilePath }}" --filter TestCategory!=IntegrationTest --logger "trx;logfilename=unitTestResults.trx" --collect "XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
        continue-on-error: true

      - name: Stop Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: |
            dotnet sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"
        continue-on-error: true

      - name: SonarCloud Quality Gate check
        id: sonarcloud-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
        continue-on-error: true
        # Force to fail step after specific time.
        timeout-minutes: 5

      - name: Quality Gate
        id: quality-step
        run: |
          if "${{ steps.unit-tests.outcome }}" == "failure" or "${{ steps.sonarcloud-quality-gate-check.outcome }}" == "failure" or "${{ steps.sonarcloud-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            print("Quality gate failed due to:")
          if "${{ steps.unit-tests.outcome }}" == "failure":
            print("- Test failures")
          if "${{ steps.sonarcloud-quality-gate-check.outcome }}" == "failure":
            print("- Could not retrieve SonarCloud quality gate status")
          if "${{ steps.sonarcloud-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            print("- Code analysis quality gate failed")
          if "${{ steps.unit-tests.outcome }}" == "failure" or "${{ steps.sonarcloud-quality-gate-check.outcome }}" == "failure" or "${{ steps.sonarcloud-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            exit(1)
        shell: python

      - name: Create package name
        if: github.ref_type == 'tag'
        id: packageName
        run: |
          $tempName = "${{ github.repository }}"
          $safeName = $tempName -replace '[\"\/\\<>|:*?]', '_'
          echo "name=$safeName" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Generate SBOM file
        if: github.ref_type == 'tag'
        run: |
          dataminer-sbom generate `
            --solution-path "${{ steps.findSlnFile.outputs.solutionFilePath }}" `
            --package-name "${{ steps.packageName.outputs.name }}" `
            --package-version "${{ github.ref_name }}" `
            --package-supplier "Skyline Communications" `
            --output "${{ github.workspace }}/SBOM" `
            --debug "${{ inputs.debug }}"

      - name: Upload SBOM file
        if: github.ref_type == 'tag'
        uses: actions/upload-artifact@v4
        with:
          name: SBOM
          path: "${{ github.workspace }}/SBOM/*.json"

  artifact_creation:
    name: Artifact Creation
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        if: inputs.use-oidc == 'true'
        with:
          client-id: ${{ inputs.oidc-client-id }}
          tenant-id: ${{ inputs.oidc-tenant-id }}
          subscription-id: ${{ inputs.oidc-subscription-id }}

      - name: Retrieve needed secrets from Azure Key Vault
        if: inputs.use-oidc == 'true'
        shell: bash
        run: |
          echo "Fetching secrets from Azure Key Vault..."

          # List of secret names needed for this job
          secret_names=("azure-token")

          for secret_name in "${secret_names[@]}"; do
            # Convert to uppercase and replace hyphens with underscores
            env_var_name=$(echo "$secret_name" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

            # Retrieve the secret value
            secret_value=$(az keyvault secret show --vault-name kv-master-cicd-secrets --name "$secret_name" --query value -o tsv)

            # Mask the secret value
            echo "::add-mask::$secret_value"

            # Export as environment variable
            echo "$env_var_name=$secret_value" >> "$GITHUB_ENV"
          done

      - name: Overwrite default secrets with user-defined secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.azureToken }}" ]]; then
            echo "Using provided azureToken secret"
            echo "AZURE_TOKEN=${{ secrets.azureToken }}" >> "$GITHUB_ENV"
          fi

      - uses: actions/checkout@v5

      - name: Find .sln file
        id: findSlnFile
        run: |
          echo solutionFilePath=$(find . -type f -name '*.sln') >> $GITHUB_OUTPUT
        shell: bash

      - name: Enable Skyline NuGet Registries
        if: github.repository_owner == 'SkylineCommunications'
        run: |
          $sources = @(
            @{ Name = "PrivateGitHubNugets"; URL = "https://nuget.pkg.github.com/SkylineCommunications/index.json"; Username = "USERNAME"; Password = "${{ secrets.GITHUB_TOKEN }}" },
            @{ Name = "CloudNuGets"; URL = "https://pkgs.dev.azure.com/skyline-cloud/Cloud_NuGets/_packaging/CloudNuGet/nuget/v3/index.json"; Username = "az"; Password = "${{ env.AZURE_TOKEN }}" },
            @{ Name = "PrivateAzureNuGets"; URL = "https://pkgs.dev.azure.com/skyline-cloud/_packaging/skyline-private-nugets/nuget/v3/index.json"; Username = "az"; Password = "${{ env.AZURE_TOKEN }}" }
          )

          foreach ($source in $sources) {
            if ($source.Password -ne "") {
              Write-Host "Checking source $($source.Name)..."

              if (dotnet nuget list source | Select-String -Pattern $source.Name) {
                Write-Host "Updating existing source $($source.Name)."
                dotnet nuget update source $source.Name --source $source.URL --username $source.Username --password $source.Password --store-password-in-clear-text
              } else {
                Write-Host "Adding new source $($source.Name)."
                dotnet nuget add source $source.URL --name $source.Name --username $source.Username --password $source.Password --store-password-in-clear-text
              }
            } else {
              Write-Host "Skipping $($source.Name) because the password is not set."
            }
          }
        shell: pwsh

      - name: NuGet restore solution
        run: dotnet restore "${{ steps.findSlnFile.outputs.solutionFilePath }}"

      - name: Install .NET Tools
        run: |
          dotnet tool install -g Skyline.DataMiner.CICD.Tools.Packager --version 2.0.*

      - name: Create package name
        id: packageName
        run: |
          tempName="${{ github.repository }}"
          echo name=${tempName//[\"\/\\<>|:*?]/_} >> $GITHUB_OUTPUT
        shell: bash

      - name: Create dmapp package
        if: github.ref_type == 'tag'
        run: | 
          dataminer-package-create dmapp "${{ github.workspace }}" \
            --type automation \
            --version ${{ github.ref_name }} \
            --output "${{ github.workspace }}" \
            --name "${{ steps.packageName.outputs.name }}" \
            --debug "${{ inputs.debug }}"

      - name: Create dmapp package
        if: github.ref_type != 'tag'
        run: |
          dataminer-package-create dmapp "${{ github.workspace }}" \
            --type automation \
            --build-number ${{ github.run_number }} \
            --output "${{ github.workspace }}" \
            --name "${{ steps.packageName.outputs.name }}" \
            --debug "${{ inputs.debug }}"

      - uses: actions/upload-artifact@v4
        with:
          name: DataMiner Installation Package
          path: "${{ github.workspace }}/${{ steps.packageName.outputs.name }}.dmapp"

  auto_generate_catalog_yaml:
      name: Auto-Generating Catalog from GitHub
      if: ${{ github.ref_type == 'branch' &&  github.event_name != 'pull_request' }}
      runs-on: ubuntu-latest
      steps:
        - name: Azure Login
          uses: azure/login@v2
          if: inputs.use-oidc == 'true'
          with:
            client-id: ${{ inputs.oidc-client-id }}
            tenant-id: ${{ inputs.oidc-tenant-id }}
            subscription-id: ${{ inputs.oidc-subscription-id }}

        - name: Retrieve needed secrets from Azure Key Vault
          if: inputs.use-oidc == 'true'
          shell: bash
          run: |
            echo "Fetching secrets from Azure Key Vault..."

            # List of secret names needed for this job
            secret_names=("azure-token")

            for secret_name in "${secret_names[@]}"; do
              # Convert to uppercase and replace hyphens with underscores
              env_var_name=$(echo "$secret_name" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

              # Retrieve the secret value
              secret_value=$(az keyvault secret show --vault-name kv-master-cicd-secrets --name "$secret_name" --query value -o tsv)

              # Mask the secret value
              echo "::add-mask::$secret_value"

              # Export as environment variable
              echo "$env_var_name=$secret_value" >> "$GITHUB_ENV"
            done

        - name: Overwrite default secrets with user-defined secrets
          shell: bash
          run: |
            if [[ -n "${{ secrets.azureToken }}" ]]; then
              echo "Using provided azureToken secret"
              echo "AZURE_TOKEN=${{ secrets.azureToken }}" >> "$GITHUB_ENV"
            fi

        - uses: actions/checkout@v5

        - name: Enable Skyline NuGet Registries
          if: github.repository_owner == 'SkylineCommunications'
          run: |
            $sources = @(
              @{ Name = "PrivateGitHubNugets"; URL = "https://nuget.pkg.github.com/SkylineCommunications/index.json"; Username = "USERNAME"; Password = "${{ secrets.GITHUB_TOKEN }}" },
              @{ Name = "CloudNuGets"; URL = "https://pkgs.dev.azure.com/skyline-cloud/Cloud_NuGets/_packaging/CloudNuGet/nuget/v3/index.json"; Username = "az"; Password = "${{ env.AZURE_TOKEN }}" },
              @{ Name = "PrivateAzureNuGets"; URL = "https://pkgs.dev.azure.com/skyline-cloud/_packaging/skyline-private-nugets/nuget/v3/index.json"; Username = "az"; Password = "${{ env.AZURE_TOKEN }}" }
            )

            foreach ($source in $sources) {
              if ($source.Password -ne "") {
                Write-Host "Checking source $($source.Name)..."

                if (dotnet nuget list source | Select-String -Pattern $source.Name) {
                  Write-Host "Updating existing source $($source.Name)."
                  dotnet nuget update source $source.Name --source $source.URL --username $source.Username --password $source.Password --store-password-in-clear-text
                } else {
                  Write-Host "Adding new source $($source.Name)."
                  dotnet nuget add source $source.URL --name $source.Name --username $source.Username --password $source.Password --store-password-in-clear-text
                }
              } else {
                Write-Host "Skipping $($source.Name) because the password is not set."
              }
            }
          shell: pwsh

        - name: Install .NET Tools
          run: |
            dotnet tool install -g Skyline.DataMiner.CICD.Tools.GitHubToCatalogYaml --version 2.0.*

        - name: Create or Extend Catalog.yml
          run: |
            github-to-catalog-yaml \
              --workspace "${{ github.workspace }}" \
              --github-token ${{ secrets.GITHUB_TOKEN }} \
              --github-repository "${{ github.repository }}" \
              --catalog-identifier "${{ vars.catalogIdentifier }}" \
              --debug "${{ inputs.debug }}"

        - name: Check if catalog.yml or manifest.yml exists
          id: check_files
          shell: pwsh
          run: |
            if (Test-Path "${{ github.workspace }}/catalog.yml") {
              echo "catalogDetails=catalog.yml" >> $env:GITHUB_ENV
            }
            elseif (Test-Path "${{ github.workspace }}/manifest.yml") {
              echo "catalogDetails=manifest.yml" >> $env:GITHUB_ENV
            }
            else {
              Write-Host "No valid file found!"
              exit 1
            }

        - uses: actions/upload-artifact@v4
          if: env.catalogDetails != ''
          with:
            name: Catalog Details
            path: "${{ github.workspace }}/${{ env.catalogDetails }}"

        - name: Commit .githubtocatalog/auto-generated-catalog
          shell: pwsh
          run: |
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add "${{ github.workspace }}/.githubtocatalog/auto-generated-catalog.yml"
            
            # Check if there are any changes to be committed
            git diff --staged --quiet
            if ($LASTEXITCODE -ne 0) {
              git commit -m "auto-generated"
            }
            else {
              Write-Host "No changes to commit."
            }

        - name: Push .githubtocatalog/auto-generated-catalog
          run: |
            git push
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  artifact_creation_registration:
    name: Artifact Registration and Upload
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    needs: [validate_skyline_quality_gate,artifact_creation]
    steps:
      - name: Azure Login
        uses: azure/login@v2
        if: inputs.use-oidc == 'true'
        with:
          client-id: ${{ inputs.oidc-client-id }}
          tenant-id: ${{ inputs.oidc-tenant-id }}
          subscription-id: ${{ inputs.oidc-subscription-id }}

      - name: Retrieve needed secrets from Azure Key Vault
        if: inputs.use-oidc == 'true'
        shell: bash
        run: |
          echo "Fetching secrets from Azure Key Vault..."

          # List of secret names needed for this job
          secret_names=("dataminer-token")

          for secret_name in "${secret_names[@]}"; do
            # Convert to uppercase and replace hyphens with underscores
            env_var_name=$(echo "$secret_name" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

            # Retrieve the secret value
            secret_value=$(az keyvault secret show --vault-name kv-master-cicd-secrets --name "$secret_name" --query value -o tsv)

            # Mask the secret value
            echo "::add-mask::$secret_value"

            # Export as environment variable
            echo "$env_var_name=$secret_value" >> "$GITHUB_ENV"
          done

      - name: Overwrite default secrets with user-defined secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.api-key }}" ]]; then
            echo "Using provided api-key secret"
            echo "DATAMINER_TOKEN=${{ secrets.api-key }}" >> "$GITHUB_ENV"
          fi

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Validate auto-generated catalog YAML file existence
        shell: pwsh
        run: |
          if (!(Test-Path "${{ github.workspace }}/.githubtocatalog/auto-generated-catalog.yml")) {
            Write-Host "Error: The auto-generated catalog YAML file was not found."
            Write-Host "Run the workflow on a branch before releasing, and ensure the tag points to the latest commit containing the auto-generated-catalog.yml file."
            exit 1
          }

      - name: Find branch
        id: findBranch
        run: |
          #!/bin/bash
          set -e  # Exit immediately if a command exits with a non-zero status.

          # Capture the branches containing the tag and process them
          branches="$(git branch --contains tags/${{ github.ref_name }} -r | grep 'origin/' | grep -vE '.*/.*/' | sed 's#origin/##' | paste -sd ",")"

          # Append to GitHub Actions output
          echo "branch=${branches}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Target Branch
        id: showResult
        run: echo "${{ steps.findBranch.outputs.branch }}"

      - name: Retrieve Installation Package
        id: retrieveInstallationPackage
        uses: actions/download-artifact@v5
        with:
          name: DataMiner Installation Package
          path: _DataMinerInstallationPackage

      - name: Find Installation package
        id: findInstallationPackage
        run: |
          IFS=$'\n'
          echo dmappPackageName=$(find _DataMinerInstallationPackage -type f -name '*.dmapp') >> $GITHUB_OUTPUT
          unset IFS
        shell: bash

      - name: Install .NET Tools
        run: |
          dotnet tool install -g Skyline.DataMiner.CICD.Tools.CatalogUpload --version 4.0.*
          dotnet tool install -g Skyline.DataMiner.CICD.Tools.GitHubToCatalogYaml --version 2.0.*
          dotnet tool install -g Skyline.DataMiner.CICD.Tools.Sbom --version 1.0.*

      - name: Retrieve SBOM file
        id: retrieveSbomFile
        uses: actions/download-artifact@v5
        with:
          name: SBOM
          path: _SBOM

      - name: Find SBOM file
        id: findSbomFile
        run: |
          IFS=$'\n'
          echo sbomFile=$(find _SBOM -type f -name '*.json') >> $GITHUB_OUTPUT
          unset IFS
        shell: bash

      - name: Add SBOM to package
        run: |
          dataminer-sbom add \
            --sbom-file "${{ steps.findSbomFile.outputs.sbomFile }}" \
            --package-file "${{ steps.findInstallationPackage.outputs.dmappPackageName }}" \
            --debug "${{ inputs.debug }}"

      - name: Create or Extend Catalog.yml
        run: |
          github-to-catalog-yaml \
            --workspace "${{ github.workspace }}" \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --github-repository "${{ github.repository }}" \
            --catalog-identifier "${{ vars.catalogIdentifier }}" \
            --debug "${{ inputs.debug }}"

      - name: Check if catalog.yml or manifest.yml exists
        id: check_files
        shell: pwsh
        run: |
          if (Test-Path "${{ github.workspace }}/catalog.yml") {
            echo "catalogDetails=catalog.yml" >> $env:GITHUB_ENV
          }
          elseif (Test-Path "${{ github.workspace }}/manifest.yml") {
            echo "catalogDetails=manifest.yml" >> $env:GITHUB_ENV
          }
          else {
            Write-Host "No valid file found!"
            exit 1
          }

      - uses: actions/upload-artifact@v4
        if: env.catalogDetails != ''
        with:
          name: Catalog Details
          path: "${{ github.workspace }}/${{ env.catalogDetails }}"

      - name: Upload to Catalog
        env:
          CICDIsForSkyline: "${{ github.repository_owner == 'SkylineCommunications' }}"
        run: |
          dataminer-catalog-upload with-registration \
            --path-to-artifact "${{ steps.findInstallationPackage.outputs.dmappPackageName }}" \
            --artifact-version ${{ github.ref_name }} \
            --branch "${{ steps.findBranch.outputs.branch }}" \
            --dm-catalog-token ${{ env.DATAMINER_TOKEN }} \
            --debug "${{ inputs.debug }}"
