name: SRM Function Master Workflow

# Controls when the workflow will run
on:
  # Allows you to run this workflow from another workflow
  workflow_call:
    outputs:
      quality_gate: 
        description: "Results from Skyline Quality Gate."
        value:  ${{ jobs.validate_skyline_quality_gate.outputs.quality}}
    inputs:
      referenceName:
        required: true
        type: string       
      runNumber:
        required: true
        type: string   
      referenceType:
        required: true
        type: string   
      repository:
        required: true
        type: string 
      owner:
        required: true
        type: string
      sonarCloudProjectName:
        required: true
        type: string
    secrets:
      api-key:
        required: true
      sonarCloudToken:
        required: true
      azureToken:
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  validate_skyline_quality_gate:
    name: Skyline Quality Gate 
    runs-on: windows-latest
    env:
      detected-unit-tests: none
    outputs:
      quality: ${{ steps.quality-step.outputs.results}}
    steps:
      - uses: actions/checkout@v5
      - name: Initialize
        run: |
          echo "workspace" ${{ github.workspace }}
          echo "ref name" ${{ inputs.referenceName }}
          echo "run number" ${{ inputs.runNumber }}
          echo "ref type" ${{ inputs.referenceType }}
          echo "repository" ${{ inputs.repository }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install dotnet-sonarscanner --global
      - name: Prepare SonarCloud Variables
        id: prepSonarCloudVar
        run: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
               myfile.write("lowerCaseOwner=" + str.lower("${{ inputs.owner }}"))
        shell: python
        
        # TODO: Refactor this in the future to a single stage with a loop that adds all the sources you specify.
      - name: Enable Skyline GitHub NuGet Registry
        if: inputs.owner == 'SkylineCommunications'
        run: |
          $SOURCE_NAME="PrivateGitHubNugets"
          $SOURCE_URL="https://nuget.pkg.github.com/SkylineCommunications/index.json"
          
          # Check if the source exists. If it does, update it.
          if (dotnet nuget list source | Select-String -Pattern $SOURCE_NAME) {
            Write-Host "Updating existing source $SOURCE_NAME."
            dotnet nuget update source $SOURCE_NAME --source $SOURCE_URL --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text
          } else {
            Write-Host "Adding new source $SOURCE_NAME."
            dotnet nuget add source $SOURCE_URL --name $SOURCE_NAME --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text
          }
        shell: pwsh
        
      - name: Enable Skyline Azure Cloud NuGet Registry
        env:
          AZURE_TOKEN_EXISTS: ${{ secrets.azureToken }}
        if: env.AZURE_TOKEN_EXISTS != null && inputs.owner == 'SkylineCommunications'
        run: |
          $SOURCE_NAME="CloudNuGets"
          $SOURCE_URL="https://pkgs.dev.azure.com/skyline-cloud/Cloud_NuGets/_packaging/CloudNuGet/nuget/v3/index.json"
          
          # Check if the source exists. If it does, update it.
          if (dotnet nuget list source | Select-String -Pattern $SOURCE_NAME) {
            Write-Host "Updating existing source $SOURCE_NAME."
            dotnet nuget update source $SOURCE_NAME --source $SOURCE_URL --username az --password ${{ secrets.azureToken }} --store-password-in-clear-text
          } else {
            Write-Host "Adding new source $SOURCE_NAME."
            dotnet nuget add source $SOURCE_URL --name $SOURCE_NAME --username az --password ${{ secrets.azureToken }} --store-password-in-clear-text
          }

      - name: Enable Skyline Azure Private NuGet Registry
        env:
          AZURE_TOKEN_EXISTS: ${{ secrets.azureToken }}
        if: env.AZURE_TOKEN_EXISTS != null && inputs.owner == 'SkylineCommunications'
        run: |
          $SOURCE_NAME="PrivateAzureNuGets"
          $SOURCE_URL="https://pkgs.dev.azure.com/skyline-cloud/_packaging/skyline-private-nugets/nuget/v3/index.json"
          
          # Check if the source exists. If it does, update it.
          if (dotnet nuget list source | Select-String -Pattern $SOURCE_NAME) {
            Write-Host "Updating existing source $SOURCE_NAME."
            dotnet nuget update source $SOURCE_NAME --source $SOURCE_URL --username az --password ${{ secrets.azureToken }} --store-password-in-clear-text
          } else {
            Write-Host "Adding new source $SOURCE_NAME."
            dotnet nuget add source $SOURCE_URL --name $SOURCE_NAME --username az --password ${{ secrets.azureToken }} --store-password-in-clear-text
          }

      - name: Building
        run: dotnet build -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false
      - name: Unit Tests
        id: unit-tests
        run: dotnet test --filter TestCategory!=IntegrationTest --logger \"trx;logfilename=unitTestResults.trx\" --collect \"XPlat Code Coverage\" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
        continue-on-error: true
      - name: Get SonarCloud Status
        id: get-sonarcloud-status
        run: |
          echo "sonarCloudProjectStatus=$(curl https://${{ secrets.sonarCloudToken }}@sonarcloud.io/api/qualitygates/project_status?projectKey=${{ inputs.sonarCloudProjectName }})" >> $env:GITHUB_OUTPUT
        continue-on-error: true
      - name: Trigger Initial Analysis
        if: fromJson(steps.get-sonarcloud-status.outputs.sonarCloudProjectStatus).projectStatus.status  == 'NONE'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.sonarCloudToken }}
        run: |
            dotnet sonarscanner begin /k:"${{ inputs.sonarCloudProjectName }}" /o:"${{ env.lowerCaseOwner }}" /d:sonar.token="${{ secrets.sonarCloudToken }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/**.trx"
            dotnet build -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false
            dotnet sonarscanner end /d:sonar.token="${{ secrets.sonarCloudToken }}"
        continue-on-error: true
      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.sonarCloudToken }}
        run: |
            dotnet sonarscanner begin /k:"${{ inputs.sonarCloudProjectName }}" /o:"${{ env.lowerCaseOwner }}" /d:sonar.token="${{ secrets.sonarCloudToken }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/**.trx"
            dotnet build -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false
            dotnet sonarscanner end /d:sonar.token="${{ secrets.sonarCloudToken }}"
        continue-on-error: true
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
        continue-on-error: true
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.sonarCloudToken }}
      - name: Quality Gate
        id: quality-step
        run: |
          if "${{ steps.unit-tests.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            print("Quality gate failed due to:")
          if "${{ steps.unit-tests.outcome }}" == "failure":
            print("- Test failures")
          if "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure":
            print("- Could not retrieve SonarCloud quality gate status")
          if "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            print("- Code analysis quality gate failed")
          if "${{ steps.unit-tests.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            exit(1)
        shell: python
      - name: Post Actions
        run: echo "todo" 

#TODO: add Pack, Upload when this gets supported.