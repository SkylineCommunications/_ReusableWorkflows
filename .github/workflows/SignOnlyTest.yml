name: NuGet Solution

# Controls when the workflow will run
on:
  # Allows you to run this workflow from another workflow
  workflow_call:
    outputs:
      quality_gate: 
        description: "Results from Skyline Quality Gate."
        value: ${{ jobs.validate_skyline_quality_gate.outputs.quality }}
    inputs:
      referenceName:
        required: true
        type: string       
      runNumber:
        required: true
        type: string   
      referenceType:
        required: true
        type: string   
      repository:
        required: true
        type: string 
      owner:
        required: true
        type: string
      sonarCloudProjectName:
        required: true
        type: string
    secrets:
      sonarCloudToken:
        required: true
      pfx:
        required: false
      pfxPassword:
        required: true
      nugetApiKey:
        required: true   
      azureToken:
        required: false  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  validate_skyline_quality_gate:
    name: Skyline Quality Gate 
    runs-on: windows-latest
    outputs:
      quality: ${{ steps.quality-step.outputs.results }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize
        run: |
          echo "workspace" ${{ github.workspace }}
          echo "ref name" ${{ inputs.referenceName }}
          echo "run number" ${{ inputs.runNumber }}
          echo "ref type" ${{ inputs.referenceType }}
          echo "repository" ${{ inputs.repository }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Install NuGetToggleOnBuild
        run: dotnet tool install Skyline.DataMiner.CICD.Tools.NuGetToggleOnBuild --global

      - name: Install NuGetPreBuildApplyBranchOrTag
        run: dotnet tool install Skyline.DataMiner.CICD.Tools.NuGetPreBuildApplyBranchOrTag --global

      - name: Install NuGetValidateSkylineSpecifications
        run: dotnet tool install Skyline.DataMiner.CICD.Tools.NuGetValidateSkylineSpecifications --global

      - name: Find .sln file
        id: findSlnFile        
        run: |
          echo solutionFilePath=$(find . -type f -name '*.sln' | sort -r | head -n 1) >> $GITHUB_OUTPUT
        shell: bash  

      - name: Validate NuGet Metadata
        run: NuGetValidateSkylineSpecifications --workspace ${{ github.workspace }} --solution-filepath "${{ steps.findSlnFile.outputs.solutionFilePath }}"

      - name: Apply Branch and output path for pre-release NuGet
        if: inputs.referenceType == 'branch'
        run: NuGetPreBuildApplyBranchOrTag --workspace ${{ github.workspace }} --tag " " --branch "${{ inputs.referenceName }}" --build ${{ inputs.runNumber }} --nugetResultFolder "${{ github.workspace }}/_NuGetResults" --solution-filepath "${{ steps.findSlnFile.outputs.solutionFilePath }}"

      - name: Apply Tag and output path for Release NuGet
        if: inputs.referenceType == 'tag'
        run: NuGetPreBuildApplyBranchOrTag --workspace ${{ github.workspace }} --tag "${{ inputs.referenceName }}" --branch " " --build ${{ inputs.runNumber }} --nugetResultFolder "${{ github.workspace }}/_NuGetResults" --solution-filepath "${{ steps.findSlnFile.outputs.solutionFilePath }}"

        # TODO: Refactor this in the future to a single stage with a loop that adds all the sources you specify.
      - name: Enable Skyline GitHub NuGet Registry
        if: inputs.owner == 'SkylineCommunications'
        run: |
          $SOURCE_NAME="PrivateGitHubNugets"
          $SOURCE_URL="https://nuget.pkg.github.com/SkylineCommunications/index.json"
          
          # Check if the source exists. If it does, update it.
          if (dotnet nuget list source | Select-String -Pattern $SOURCE_NAME) {
            Write-Host "Updating existing source $SOURCE_NAME."
            dotnet nuget update source $SOURCE_NAME --source $SOURCE_URL --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text
          } else {
            Write-Host "Adding new source $SOURCE_NAME."
            dotnet nuget add source $SOURCE_URL --name $SOURCE_NAME --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text
          }
        shell: pwsh
        
      - name: Enable Skyline Azure Cloud NuGet Registry
        env:
          AZURE_TOKEN_EXISTS: ${{ secrets.azureToken }}
        if: env.AZURE_TOKEN_EXISTS != null && inputs.owner == 'SkylineCommunications'
        run: |
          $SOURCE_NAME="CloudNuGets"
          $SOURCE_URL="https://pkgs.dev.azure.com/skyline-cloud/Cloud_NuGets/_packaging/CloudNuGet/nuget/v3/index.json"
          
          # Check if the source exists. If it does, update it.
          if (dotnet nuget list source | Select-String -Pattern $SOURCE_NAME) {
            Write-Host "Updating existing source $SOURCE_NAME."
            dotnet nuget update source $SOURCE_NAME --source $SOURCE_URL --username az --password ${{ secrets.azureToken }} --store-password-in-clear-text
          } else {
            Write-Host "Adding new source $SOURCE_NAME."
            dotnet nuget add source $SOURCE_URL --name $SOURCE_NAME --username az --password ${{ secrets.azureToken }} --store-password-in-clear-text
          }

      - name: Enable Skyline Azure Private NuGet Registry
        env:
          AZURE_TOKEN_EXISTS: ${{ secrets.azureToken }}
        if: env.AZURE_TOKEN_EXISTS != null && inputs.owner == 'SkylineCommunications'
        run: |
          $SOURCE_NAME="PrivateAzureNuGets"
          $SOURCE_URL="https://pkgs.dev.azure.com/skyline-cloud/_packaging/skyline-private-nugets/nuget/v3/index.json"
          
          # Check if the source exists. If it does, update it.
          if (dotnet nuget list source | Select-String -Pattern $SOURCE_NAME) {
            Write-Host "Updating existing source $SOURCE_NAME."
            dotnet nuget update source $SOURCE_NAME --source $SOURCE_URL --username az --password ${{ secrets.azureToken }} --store-password-in-clear-text
          } else {
            Write-Host "Adding new source $SOURCE_NAME."
            dotnet nuget add source $SOURCE_URL --name $SOURCE_NAME --username az --password ${{ secrets.azureToken }} --store-password-in-clear-text
          }    

      - name: Building
        run: dotnet build "${{ steps.findSlnFile.outputs.solutionFilePath }}" -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false

      - uses: actions/upload-artifact@v4
        with:
          name: NugetPackages
          path: "${{ github.workspace }}/_NuGetResults"

      - name: Disable NuGet Creation on Subsequent Builds
        run: NuGetToggleOnBuild --setToActive false --workspace ${{ github.workspace }} --onlyOnConfiguredNuGet false  --solution-filepath "${{ steps.findSlnFile.outputs.solutionFilePath }}"

    # Signing cannot be done from linux environment (https://github.com/dotnet/runtime/issues/48794)
  sign:
    # Don't run the signing when dependabot branch/pull request
    if: ${{ github.actor != 'dependabot[bot]' }}
    # The type of runner that the job will run on
    runs-on: windows-latest
    needs: validate_skyline_quality_gate
    env: 
      AZURE_TENANT_ID: 5f175691-8d1c-4932-b7c8-ce990839ac40 
      AZURE_CLIENT_ID: a7ff072c-5bc8-4fa0-9e0c-bb9e40d59b0b
      AZURE_CLIENT_SECRET: ${{ secrets.pfxPassword }}
    steps:
      - name: Download Unsigned NuGet
        id: downloadUnsignedNuget
        uses: actions/download-artifact@v4
        with:
          name: NugetPackages
          path: _NuGetResults

      - name: Install dotnet sign
        run: dotnet tool install sign --prerelease --global
      
      - name: Sign NuGet Package
        run: |       
          IFS=$'\n'
          sign code azure-key-vault "_NuGetResults/**/*.nupkg" --publisher-name "Skyline Communications" --description "Skyline Signing" --description-url "https://www.skyline.be/" --azure-key-vault-certificate "Skyline-CodeSigning" --azure-key-vault-url "https://kv-slc-codesigning.vault.azure.net/" --output "_SignedNuGetResults"
          unset IFS    
        shell: bash
        
      - uses: actions/upload-artifact@v4
        with:
          name: SignedNugetPackages
          path: "${{ github.workspace }}/_SignedNuGetResults"