name: DataMiner App Packages

# Needed for OIDC, checkout, git-push, ...
permissions: write-all

on:
  workflow_call:
    inputs:
      # No need to specify these as the workflow can access github.* (https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context)
      # When a reusable workflow is triggered by a caller workflow, the github context is always associated with the caller workflow.
      referenceName:
        required: false
        type: string
      runNumber:
        required: false
        type: string
      referenceType:
        required: false
        type: string
      repository:
        required: false
        type: string
      owner:
        required: false
        type: string

      # Optional OIDC inputs in case outside SkylineCommunications organization
      oidc-client-id:
        required: false
        type: string
      oidc-tenant-id:
        required: false
        type: string
      oidc-subscription-id:
        required: false
        type: string

      sonarCloudProjectName:
        required: true
        type: string
      configuration:
        required: true
        type: string
      solutionFilterName:
        required: false
        type: string
      debug:
        required: false
        type: boolean

    secrets:
      sonarCloudToken:
        required: false
      dataminerToken:
        required: false
      azureToken:
        required: false
      overrideCatalogDownloadToken:
        required: false

env:
  VERSION_APPPACKAGEINSTALLER: '3.0.2'
  VERSION_SDK: '2.0.2'

jobs:
  check_deprecated_item:
    name: Check deprecated items
    runs-on: ubuntu-latest
    steps:
      - name: Check if obsolete inputs are still used
        run: |
          input_names=("referenceName" "runNumber" "referenceType" "repository" "owner")

          for input_name in "${input_names[@]}"; do
            value="${{ inputs.referenceName }}"  # placeholder, see note below
            case $input_name in
              referenceName) value="${{ inputs.referenceName }}" ;;
              runNumber) value="${{ inputs.runNumber }}" ;;
              referenceType) value="${{ inputs.referenceType }}" ;;
              repository) value="${{ inputs.repository }}" ;;
              owner) value="${{ inputs.owner }}" ;;
            esac

            if [ -n "$value" ]; then
              echo "::warning::The input '$input_name' can be safely removed as this is not required anymore."
            fi
          done

      - name: Check if obsolete secrets are still used
        if: github.repository_owner == 'SkylineCommunications'
        run: |
          secret_names=("azureToken" "sonarCloudToken")

          for secret_name in "${secret_names[@]}"; do
            value="${{ secrets.sonarCloudToken }}"  # placeholder, see note below
            case $secret_name in
              sonarCloudToken) value="${{ secrets.sonarCloudToken }}" ;;
              azureToken) value="${{ secrets.azureToken }}" ;;
            esac

            if [ -n "$value" ]; then
              echo "::warning::The secret '$secret_name' can be safely removed as this is not required anymore."
            fi
          done

  check_oidc:
    name: Check OIDC
    runs-on: ubuntu-latest
    outputs:
      client-id: ${{ steps.set_oidc.outputs.client-id }}
      tenant-id: ${{ steps.set_oidc.outputs.tenant-id }}
      subscription-id: ${{ steps.set_oidc.outputs.subscription-id }}
      use-oidc: ${{ steps.set_oidc.outputs.use-oidc }}
    steps:
      - name: Set Azure OIDC parameters
        id: set_oidc
        run: |
          echo "Determining Azure OIDC parameters..."

          if [[ -n "${{ inputs.oidc-client-id }}" ]]; then
            echo "Using provided OIDC parameters"
            {
              echo "client-id=${{ inputs.oidc-client-id }}"
              echo "tenant-id=${{ inputs.oidc-tenant-id }}"
              echo "subscription-id=${{ inputs.oidc-subscription-id }}"
              echo "use-oidc=true"
            } >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.repository_owner }}" == "SkylineCommunications" ]]; then
            echo "Using SkylineCommunications default OIDC parameters"
            {
              echo "client-id=c50da9cc-ba14-4138-8595-a62d97ab0e53"
              echo "tenant-id=5f175691-8d1c-4932-b7c8-ce990839ac40"
              echo "subscription-id=d6cbb8df-56eb-451d-9db7-67f49cba3220"
              echo "use-oidc=true"
            } >> "$GITHUB_OUTPUT"
          else
            echo "No OIDC parameters provided and owner does not match SkylineCommunications"
            echo "use-oidc=false" >> "$GITHUB_OUTPUT"
          fi

  skyline_ci:
    name: Skyline Quality Gate
    runs-on: ubuntu-latest
    needs: check_oidc
    steps:
      - name: Azure Login
        uses: azure/login@v2
        if: needs.check_oidc.outputs.use-oidc == 'true'
        with:
          client-id: ${{ needs.check_oidc.outputs.client-id }}
          tenant-id: ${{ needs.check_oidc.outputs.tenant-id }}
          subscription-id: ${{ needs.check_oidc.outputs.subscription-id }}

      - name: Retrieve needed secrets from Azure Key Vault
        if: needs.check_oidc.outputs.use-oidc == 'true'
        shell: bash
        run: |
          echo "Fetching secrets from Azure Key Vault..."

          # List of secret names needed for this job
          secret_names=("dataminer-token" "azure-token" "sonar-token")

          for secret_name in "${secret_names[@]}"; do
            # Convert to uppercase and replace hyphens with underscores
            env_var_name=$(echo "$secret_name" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

            # Retrieve the secret value
            secret_value=$(az keyvault secret show --vault-name kv-master-cicd-secrets --name "$secret_name" --query value -o tsv)

            # Mask the secret value
            echo "::add-mask::$secret_value"

            # Export as environment variable
            echo "$env_var_name=$secret_value" >> "$GITHUB_ENV"
          done

      - name: Overwrite default secrets with user-defined secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.azureToken }}" ]]; then
            echo "Using provided azureToken secret"
            echo "AZURE_TOKEN=${{ secrets.azureToken }}" >> "$GITHUB_ENV"
          fi

          if [[ -n "${{ secrets.sonarCloudToken }}" ]]; then
            echo "Using provided sonarCloudToken secret"
            echo "SONAR_TOKEN=${{ secrets.sonarCloudToken }}" >> "$GITHUB_ENV"
          fi

          if [[ -n "${{ secrets.dataminerToken }}" ]]; then
            echo "Using provided dataminerToken secret"
            echo "DATAMINER_TOKEN=${{ secrets.dataminerToken }}" >> "$GITHUB_ENV"
          fi

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'

      - name: Cache and Install Mono
        uses: awalsh128/cache-apt-pkgs-action@v1.5.3
        with:
          packages: mono-complete

      - name: Validate SonarCloud Project Name
        id: validate-sonar-name
        run: |
          if [[ -z "${{ inputs.sonarCloudProjectName }}" ]]; then
            echo "Error: sonarCloudProjectName is not set."
            echo "Please create a SonarCloud project by visiting: https://sonarcloud.io/projects/create and copy the id of the project as mentioned in the sonarcloud project url."
            repo_url="https://github.com/${{ github.repository }}/settings/variables/actions"
            echo "Then set a SONAR_NAME variable in your repository settings: $repo_url"
            echo "Alternatively, if you do not wish to use the Skyline Quality Gate but intend to publish your results to the catalog, you may create your workflow to include the equivalent of a dotnet publish step as shown below (remove the \\):"
            echo "    - name: Publish"
            echo "      env:"
            echo "        api-key: $\{{ secrets.DATAMINER_TOKEN }}"
            echo "      run: dotnet publish -p:Version=\"0.0.$\{{ github.run_number }}\" -p:VersionComment=\"Iterative Development\" -p:CatalogPublishKeyName=api-key"
            exit 1
          fi

      - name: Validate SonarCloud Secret Token
        id: validate-sonar-token
        run: |
          if [[ -z "${{ env.SONAR_TOKEN }}" ]]; then
            echo "Error: sonarCloudToken is not set."
            echo "Please create a SonarCloud token by visiting: https://sonarcloud.io/account/security and copy the value of the created token."
            repo_url="https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "Then set a SONAR_TOKEN secret in your repository settings: $repo_url"
            echo "Alternatively, if you do not wish to use the Skyline Quality Gate but intend to publish your results to the catalog, you may create your workflow to include the equivalent of a dotnet publish step as shown below (remove the \\):"
            echo "    - name: Publish"
            echo "      env:"
            echo "        api-key: $\{{ secrets.DATAMINER_TOKEN }}"
            echo "      run: dotnet publish -p:Version=\"0.0.$\{{ github.run_number }}\" -p:VersionComment=\"Iterative Development\" -p:CatalogPublishKeyName=api-key"
            exit 1
          fi

      - name: Validate DataMiner Secret Token
        id: validate-dataminer-token
        if: github.ref_type == 'tag'
        run: |
          if [[ -z "${{ env.DATAMINER_TOKEN }}" ]]; then
            echo "Error: dataminerToken is not set. Release not possible!"
            echo "Please create or re-use an admin.dataminer.services token by visiting: https://admin.dataminer.services/."
            echo "Navigate to the right organization, then go to Keys and create or find a key with the permissions Register catalog items, Download catalog versions, and Read catalog items."
            echo "Copy the value of the token."
            repo_url="https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "Then set a DATAMINER_TOKEN secret in your repository settings: $repo_url"
            exit 1
          fi

      - name: Find .sln file
        id: findSlnFile
        run: |
          if [[ -z "${{ inputs.solutionFilterName }}" ]]; then
            echo solutionFilePath=$(find . -type f -name '*.sln') >> $GITHUB_OUTPUT
          else
            echo solutionFilePath=$(find . -type f -name '${{ inputs.solutionFilterName }}') >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Enable Skyline NuGet Registries
        if: github.repository_owner == 'SkylineCommunications'
        run: |
          $sources = @(
            @{ Name = "PrivateGitHubNugets"; URL = "https://nuget.pkg.github.com/SkylineCommunications/index.json"; Username = "USERNAME"; Password = "${{ secrets.GITHUB_TOKEN }}" },
            @{ Name = "CloudNuGets"; URL = "https://pkgs.dev.azure.com/skyline-cloud/Cloud_NuGets/_packaging/CloudNuGet/nuget/v3/index.json"; Username = "az"; Password = "${{ env.AZURE_TOKEN }}" },
            @{ Name = "PrivateAzureNuGets"; URL = "https://pkgs.dev.azure.com/skyline-cloud/_packaging/skyline-private-nugets/nuget/v3/index.json"; Username = "az"; Password = "${{ env.AZURE_TOKEN }}" }
          )

          foreach ($source in $sources) {
            if ($source.Password -ne "") {
              Write-Host "Checking source $($source.Name)..."

              if (dotnet nuget list source | Select-String -Pattern $source.Name) {
                Write-Host "Updating existing source $($source.Name)."
                dotnet nuget update source $source.Name --source $source.URL --username $source.Username --password $source.Password --store-password-in-clear-text
              } else {
                Write-Host "Adding new source $($source.Name)."
                dotnet nuget add source $source.URL --name $source.Name --username $source.Username --password $source.Password --store-password-in-clear-text
              }
            } else {
              Write-Host "Skipping $($source.Name) because the password is not set."
            }
          }
        shell: pwsh

      - name: Install Tools
        run: |
          dotnet tool install dotnet-sonarscanner --global
          dotnet tool install Skyline.DataMiner.CICD.Tools.Sbom --global --version 1.0.*
          dotnet tool install Skyline.DataMiner.CICD.Tools.NuGetChangeVersion --global --version 2.*

      - name: Update Skyline.DataMiner.Core.AppPackages
        run: NuGetChangeVersion --name Skyline.DataMiner.Core.AppPackageInstaller --workspace "${{ github.workspace }}" --solution-filepath "${{ steps.findSlnFile.outputs.solutionFilePath }}" --nugetVersion $VERSION_APPPACKAGEINSTALLER

      - name: Update Skyline.DataMiner.Sdk version in global.json (if present)
        shell: pwsh
        run: |
          $globalJsonPath = Join-Path $env:GITHUB_WORKSPACE "global.json"

          if (-Not (Test-Path $globalJsonPath)) {
            Write-Host "No global.json found. Skipping update."
            return
          }

          $jsonContent = Get-Content $globalJsonPath -Raw | ConvertFrom-Json

          if (-not $jsonContent.'msbuild-sdks') {
            $jsonContent | Add-Member -MemberType NoteProperty -Name 'msbuild-sdks' -Value @{}
          }

          $jsonContent.'msbuild-sdks'.'Skyline.DataMiner.Sdk' = $env:VERSION_SDK

          $updatedJson = $jsonContent | ConvertTo-Json -Depth 10

          $updatedJson | Set-Content $globalJsonPath -Encoding UTF8

          Write-Host "Updated global.json:"
          Write-Host $updatedJson

      - name: Prepare SonarCloud Variables
        id: prepSonarCloudVar
        run: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
              myfile.write("lowerCaseOwner=" + str.lower("${{ github.repository_owner }}"))
        shell: python

      - name: Get SonarCloud Status
        id: get-sonarcloud-status
        run: |
          sonarCloudProjectStatus=$(curl -s -u "${{ env.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ inputs.sonarCloudProjectName }}")

          # Check if the response is empty or not valid JSON
          if [ -z "$sonarCloudProjectStatus" ] || ! echo "$sonarCloudProjectStatus" | jq . > /dev/null 2>&1; then
            echo "Error: The SONAR_TOKEN is invalid, expired, or the response is empty. Please check: https://sonarcloud.io/account/security and update your token: https://github.com/${{ github.repository }}/settings/secrets/actions" >&2
            echo "Returned response: $sonarCloudProjectStatus" >&2
            exit 1
          fi

          # Output the JSON response if valid
          echo "Returned response: $sonarCloudProjectStatus"
          echo "sonarCloudProjectStatus=$sonarCloudProjectStatus" >> $GITHUB_OUTPUT
        continue-on-error: false
        shell: bash

      - name: Apply SourceCode Url To Manifest
        run: |
          $manifestFiles = Get-ChildItem -Recurse -Filter 'manifest.yml' |
              Where-Object { $_.FullName -match '[\\/]CatalogInformation[\\/]' }

          foreach ($file in $manifestFiles) {
              $lines = Get-Content -Path $file.FullName
              $updated = $false

              for ($i = 0; $i -lt $lines.Count; $i++) {
                  if ($lines[$i] -match '^\s*source_code_url:\s*$') {
                      $indent = ($lines[$i] -match '^(\s*)source_code_url:')[1]
                      $lines[$i] = "$indent" + "source_code_url: 'https://github.com/${{ github.repository }}'"
                      $updated = $true
                      break
                  }
              }

              if ($updated) {
                  Write-Host "Updating: $($file.FullName) with 'source_code_url: https://github.com/${{ github.repository }}'"
                  Set-Content -Path $file.FullName -Value $lines -Encoding UTF8
              }
          }
        shell: pwsh

      - name: Trigger Initial Analysis
        if: ${{ fromJson(steps.get-sonarcloud-status.outputs.sonarCloudProjectStatus).projectStatus.status == 'NONE' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: |
            dotnet sonarscanner begin /k:"${{ inputs.sonarCloudProjectName }}" /o:"${{ env.lowerCaseOwner }}" /d:sonar.token="${{ env.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/**.trx"
            dotnet build "${{ steps.findSlnFile.outputs.solutionFilePath }}" `
              -p:GenerateDataMinerPackage=false `
              --configuration ${{ inputs.configuration }} `
              -nodeReuse:false
            dotnet sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"
        continue-on-error: true
        shell: pwsh

      - name: Start Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: |
            dotnet sonarscanner begin /k:"${{ inputs.sonarCloudProjectName }}" /o:"${{ env.lowerCaseOwner }}" /d:sonar.token="${{ env.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/**.trx"
        continue-on-error: true

      - name: Build for pre-release
        if: github.ref_type == 'branch'
        env:
          OVERRIDE_CATALOG_DOWNLOAD_TOKEN: ${{ secrets.overrideCatalogDownloadToken }}
        run: |
          dotnet build "${{ steps.findSlnFile.outputs.solutionFilePath }}" `
            -p:Version="0.0.${{ github.run_number }}" `
            --configuration ${{ inputs.configuration }} `
            -p:CatalogPublishKeyName="DATAMINER_TOKEN" `
            -p:CatalogDefaultDownloadKeyName="OVERRIDE_CATALOG_DOWNLOAD_TOKEN" `
            -p:SkylineDataMinerSdkDebug="${{ inputs.debug }}" `
            -nodeReuse:false
        shell: pwsh

      - name: Build for release
        if: github.ref_type == 'tag'
        env:
          OVERRIDE_CATALOG_DOWNLOAD_TOKEN: ${{ secrets.overrideCatalogDownloadToken }}
        run: |
          dotnet build "${{ steps.findSlnFile.outputs.solutionFilePath }}" `
            -p:Version="${{ github.ref_name }}" `
            --configuration ${{ inputs.configuration }} `
            -p:CatalogPublishKeyName="DATAMINER_TOKEN" `
            -p:CatalogDefaultDownloadKeyName="OVERRIDE_CATALOG_DOWNLOAD_TOKEN" `
            -p:SkylineDataMinerSdkDebug="${{ inputs.debug }}" `
            -nodeReuse:false
        shell: pwsh

      - name: Unit Tests
      # when not using MSTest you'll need to install coverlet.collector nuget in your test solutions
        id: unit-tests
        run: dotnet test "${{ steps.findSlnFile.outputs.solutionFilePath }}" --no-build --configuration ${{ inputs.configuration }} --filter TestCategory!=IntegrationTest --logger "trx;logfilename=unitTestResults.trx" --collect "XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover

      - name: Stop Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: |
            dotnet sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"
        continue-on-error: true

      - name: SonarCloud Quality Gate check
        id: sonarcloud-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
        timeout-minutes: 5

      - name: Create package name
        id: packageName
        run: |
          $tempName = "${{ github.repository }}"
          $safeName = $tempName -replace '[\"\/\\<>|:*?]', '_'
          echo "name=$safeName" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Generate SBOM file
        run: |
          find . -type f -name "*.dmapp" -print0 | while IFS= read -r -d '' file; do
            echo "Generating SBOM for $file"
            dataminer-sbom generate-and-add \
              --solution-path "${{ steps.findSlnFile.outputs.solutionFilePath }}" \
              --package-file "$file" \
              --package-name "${{ steps.packageName.outputs.name }}" \
              --package-version "${{ github.ref_name }}" \
              --package-supplier "Skyline Communications" \
              --debug "${{ inputs.debug }}"
          done

      - uses: actions/upload-artifact@v4
        with:
          name: DataMiner Installation Packages (${{ inputs.configuration }} ${{ inputs.solutionFilterName }}) unsigned
          path: |
            **/bin/${{ inputs.configuration }}/*.dmapp
            **/bin/${{ inputs.configuration }}/*.zip
            **/bin/${{ inputs.configuration }}/**/*.dmapp
            **/bin/${{ inputs.configuration }}/**/*.zip
        continue-on-error: true

  skyline_cd:
    name: Skyline Catalog Release
    runs-on: windows-latest
    if: github.ref_type == 'tag'
    needs: [skyline_ci, check_oidc]
    steps:
      - name: Azure Login
        uses: azure/login@v2
        if: needs.check_oidc.outputs.use-oidc == 'true'
        with:
          client-id: ${{ needs.check_oidc.outputs.client-id }}
          tenant-id: ${{ needs.check_oidc.outputs.tenant-id }}
          subscription-id: ${{ needs.check_oidc.outputs.subscription-id }}

      - name: Retrieve needed secrets from Azure Key Vault
        if: needs.check_oidc.outputs.use-oidc == 'true'
        shell: bash
        run: |
          echo "Fetching secrets from Azure Key Vault..."

          # List of secret names needed for this job
          secret_names=("dataminer-token" "signing-client-id" "signing-client-secret" "signing-tenant-id" "signing-key-vault-certificate" "signing-key-vault-url")

          for secret_name in "${secret_names[@]}"; do
            # Convert to uppercase and replace hyphens with underscores
            env_var_name=$(echo "$secret_name" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

            # Retrieve the secret value
            secret_value=$(az keyvault secret show --vault-name kv-master-cicd-secrets --name "$secret_name" --query value -o tsv)

            # Mask the secret value
            echo "::add-mask::$secret_value"

            # Export as environment variable
            echo "$env_var_name=$secret_value" >> "$GITHUB_ENV"
          done

      - name: Overwrite default secrets with user-defined secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.dataminerToken }}" ]]; then
            echo "Using provided dataminerToken secret"
            echo "DATAMINER_TOKEN=${{ secrets.dataminerToken }}" >> "$GITHUB_ENV"
          fi

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Find .sln file
        id: findSlnFile
        run: |
          if [[ -z "${{ inputs.solutionFilterName }}" ]]; then
            echo solutionFilePath=$(find . -type f -name '*.sln') >> $GITHUB_OUTPUT
          else
            echo solutionFilePath=$(find . -type f -name '${{ inputs.solutionFilterName }}') >> $GITHUB_OUTPUT
          fi
        shell: bash

# Alternative option here, is to perform the dotnet build again, but that needs all the nuget access again, etc.
      - name: Download artifact from CI
        uses: actions/download-artifact@v5
        with:
          name: DataMiner Installation Packages (${{ inputs.configuration }} ${{ inputs.solutionFilterName }}) unsigned
          path: downloaded_artifacts

      - name: Extract artifact contents putting them back in the bin folders.
        run: |
          Write-Output "Extracting all zip and dmapp files and restoring original structure..."

          $downloadRoot = Resolve-Path "downloaded_artifacts"
          $workspaceRoot = Resolve-Path "."

          Get-ChildItem -Path $downloadRoot -Recurse -File | Where-Object { $_.Extension -in '.zip', '.dmapp' } | ForEach-Object {
              $archiveFile = $_.FullName
              $relativePath = $archiveFile.Substring($downloadRoot.Path.Length + 1) -replace '\\', '/'
              $targetPath = Join-Path $workspaceRoot $relativePath

              # Ensure target directory exists
              $targetFolder = Split-Path $targetPath
              if (-not (Test-Path $targetFolder)) {
                  New-Item -ItemType Directory -Path $targetFolder -Force | Out-Null
              }

              # Move the file
              Move-Item -Path $archiveFile -Destination $targetPath -Force
              Write-Output "Moved $relativePath to workspace root"
          }

          # Remove the downloaded_artifacts directory after migration
          Write-Output "Removing downloaded_artifacts folder..."
          Remove-Item -Path $downloadRoot -Recurse -Force
          Write-Output "Cleanup complete."
        shell: pwsh

      - name: Install Tools
        if: needs.check_oidc.outputs.use-oidc == 'true'
        run: |
          dotnet tool install Skyline.DataMiner.CICD.Tools.PackageSign --global --version 1.0.*

      - name: Sign generated dmapp packages
        if: needs.check.outputs.use-oidc == 'true'
        shell: pwsh
        env:
          AZURE_TENANT_ID: ${{ env.SIGNING_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ env.SIGNING_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ env.SIGNING_CLIENT_SECRET }}
        run: |
          Write-Output "Locating .dmapp files in bin folders..."

          # Get all .dmapp files in bin or subfolders of bin
          $dmappFiles = Get-ChildItem -Path "**/bin" -Recurse -Filter *.dmapp

          if ($dmappFiles.Count -eq 0) {
              Write-Output "No .dmapp files found."
          }

          foreach ($file in $dmappFiles) {
              # Get the parent folder path
              $parentPath = $file.Directory.FullName

              Write-Output "Signing .dmapp in: $parentPath"

              # Execute the signing command
              dataminer-package-signature sign $file -kvu $env:SIGNING_KEY_VAULT_URL -kvc $env:SIGNING_KEY_VAULT_CERTIFICATE -o $parentPath
          }

      - name: Authenticate with GitHub CLI
        shell: pwsh
        run: |
          "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Find Version Comment
        id: findVersionComment
        run: |
          echo "Checking for release notes associated with the reference: '${{ github.ref_name }}'"

          # Retrieve the release note body
          RELEASE_NOTE=$(gh release view "${{ github.ref_name }}" --json body -q '.body' 2>/dev/null || echo "")

          escape_special_chars() {
            echo "$1" | sed -e 's/,/%2c/g' -e 's/"/%22/g' -e 's/;/%3b/g'
          }

          if [[ -n "$RELEASE_NOTE" ]]; then
            ESCAPED_RELEASE_NOTE=$(escape_special_chars "$RELEASE_NOTE")
            echo "Release note found for '${{ github.ref_name }}': $ESCAPED_RELEASE_NOTE"
            # Escape multiline string for GITHUB_OUTPUT
            echo "versionComment<<EOF" >> $GITHUB_OUTPUT
            echo "$ESCAPED_RELEASE_NOTE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No release note found for '${{ github.ref_name }}'. Falling back to tag or commit message."
            VERSION_COMMENT=$(git describe --tags --exact-match 2>/dev/null || git log -1 --pretty=format:%s)
            ESCAPED_VERSION_COMMENT=$(escape_special_chars "$VERSION_COMMENT")
            echo "Fallback version comment: $ESCAPED_VERSION_COMMENT"
            # Escape fallback as well
            echo "versionComment=$ESCAPED_VERSION_COMMENT" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Update Skyline.DataMiner.Sdk version in global.json (if present)
        shell: pwsh
        run: |
          $globalJsonPath = Join-Path $env:GITHUB_WORKSPACE "global.json"

          if (-Not (Test-Path $globalJsonPath)) {
            Write-Host "No global.json found. Skipping update."
            return
          }

          $jsonContent = Get-Content $globalJsonPath -Raw | ConvertFrom-Json

          if (-not $jsonContent.'msbuild-sdks') {
            $jsonContent | Add-Member -MemberType NoteProperty -Name 'msbuild-sdks' -Value @{}
          }

          $jsonContent.'msbuild-sdks'.'Skyline.DataMiner.Sdk' = $env:VERSION_SDK

          $updatedJson = $jsonContent | ConvertTo-Json -Depth 10

          $updatedJson | Set-Content $globalJsonPath -Encoding UTF8

          Write-Host "Updated global.json:"
          Write-Host $updatedJson

      - name: Publish To Catalog
        shell: pwsh
        run: |
          dotnet publish `
            "${{ steps.findSlnFile.outputs.solutionFilePath }}" `
            --no-build `
            -p:Version="${{ github.ref_name }}" `
            -p:VersionComment="${{ steps.findVersionComment.outputs.versionComment }}" `
            -p:CatalogPublishKeyName="DATAMINER_TOKEN" `
            --configuration ${{ inputs.configuration }} `
            -p:SkylineDataMinerSdkDebug="${{ inputs.debug }}" `
            -p:IsPublishable=false
