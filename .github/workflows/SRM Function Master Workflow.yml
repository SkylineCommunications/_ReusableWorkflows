name: SRM Function Master Workflow

# Controls when the workflow will run
on:
  # Allows you to run this workflow from another workflow
  workflow_call:
    outputs:
      quality_gate: 
        description: "Results from Skyline Quality Gate."
        value:  ${{ jobs.validate_skyline_quality_gate.outputs.quality}}
      artifact-id: 
        description: "Artifact ID of uploaded Package if successful."
        value:  ${{ jobs.artifact_creation_registration.outputs.artifact-id }}
    inputs:
      referenceName:
        required: true
        type: string       
      runNumber:
        required: true
        type: string   
      referenceType:
        required: true
        type: string   
      repository:
        required: true
        type: string 
      owner:
        required: true
        type: string
      sonarCloudProjectName:
        required: true
        type: string
    secrets:
      api-key:
        required: true
      sonarCloudToken:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  validate_skyline_quality_gate:
    name: Skyline Quality Gate 
    runs-on: windows-latest
    env:
      detected-unit-tests: none
    outputs:
      quality: ${{ steps.quality-step.outputs.results}}
    steps:
      - uses: actions/checkout@v4
      - name: Initialize
        run: |
          echo "workspace" ${{ github.workspace }}
          echo "ref name" ${{ inputs.referenceName }}
          echo "run number" ${{ inputs.runNumber }}
          echo "ref type" ${{ inputs.referenceType }}
          echo "repository" ${{ inputs.repository }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install dotnet-sonarscanner --global
      - name: Prepare SonarCloud Variables
        id: prepSonarCloudVar
        run: |
          import os
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
               myfile.write("lowerCaseOwner=" + str.lower("${{ inputs.owner }}"))
        shell: python
        
      - name: Enable Skyline GitHub NuGet Registry
        if: inputs.owner == 'SkylineCommunications'
        run: dotnet nuget add source "https://nuget.pkg.github.com/SkylineCommunications/index.json" --username USERNAME --password ${{ secrets.GITHUB_TOKEN }}
        
      - name: Building
        run: dotnet build -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false
      - name: Unit Tests
        id: unit-tests
        run: dotnet test --filter TestCategory!=IntegrationTest --logger \"trx;logfilename=unitTestResults.trx\" --collect \"XPlat Code Coverage\" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
        continue-on-error: true
      - name: Get SonarCloud Status
        id: get-sonarcloud-status
        run: |
          echo "sonarCloudProjectStatus=$(curl https://${{ secrets.sonarCloudToken }}@sonarcloud.io/api/qualitygates/project_status?projectKey=${{ inputs.sonarCloudProjectName }})" >> $env:GITHUB_OUTPUT
        continue-on-error: true
      - name: Trigger Initial Analysis
        if: fromJson(steps.get-sonarcloud-status.outputs.sonarCloudProjectStatus).projectStatus.status  == 'NONE'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.sonarCloudToken }}
        run: |
            dotnet sonarscanner begin /k:"${{ inputs.sonarCloudProjectName }}" /o:"${{ env.lowerCaseOwner }}" /d:sonar.token="${{ secrets.sonarCloudToken }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/**.trx"
            dotnet build -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false
            dotnet sonarscanner end /d:sonar.token="${{ secrets.sonarCloudToken }}"
        continue-on-error: true
      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.sonarCloudToken }}
        run: |
            dotnet sonarscanner begin /k:"${{ inputs.sonarCloudProjectName }}" /o:"${{ env.lowerCaseOwner }}" /d:sonar.token="${{ secrets.sonarCloudToken }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/**.trx"
            dotnet build -p:DefineConstants="DCFv1%3BDBInfo%3BALARM_SQUASHING" --configuration Release -nodeReuse:false
            dotnet sonarscanner end /d:sonar.token="${{ secrets.sonarCloudToken }}"
        continue-on-error: true
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
        continue-on-error: true
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.sonarCloudToken }}
      - name: Quality Gate
        id: quality-step
        run: |
          if "${{ steps.unit-tests.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            print("Quality gate failed due to:")
          if "${{ steps.unit-tests.outcome }}" == "failure":
            print("- Test failures")
          if "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure":
            print("- Could not retrieve SonarCloud quality gate status")
          if "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            print("- Code analysis quality gate failed")
          if "${{ steps.unit-tests.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure" or "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED":
            exit(1)
        shell: python
      - name: Post Actions
        run: echo "todo" 

  # TODO: uncomment below when action supports SRM Functions
  # artifact_creation_registration:
  #   name: Artifact Registration and Upload 
  #   runs-on: ubuntu-latest
  #   needs: validate_skyline_quality_gate
  #   env:
  #     result-artifact-id: none
  #   outputs:
  #     artifact-id: ${{ env.result-artifact-id }}
  #     #artifact-id-development: ${{ steps.upload-step-development.outputs.ARTIFACT_ID }}

  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v4

  #     - name: readDir
  #       run: ls   

  #     - name: Initialize
  #       run: |
  #         echo "workspace" ${{ github.workspace }}
  #         echo "ref name" ${{ inputs.referenceName }}
  #         echo "run number" ${{ inputs.runNumber }}
  #         echo "ref type" ${{ inputs.referenceType }}
  #         echo "repository" ${{ inputs.repository }}
        
      # - name: Find or create NuGet.config file
      #   if: inputs.owner == 'SkylineCommunications'
      #   id: findOrCreateNuGetFile
      #   run: |
      #     file=$(find . -type f -iname 'nuget.config' | head -n 1)
      #     if [[ -n "$file" ]]; then
      #       echo "NuGet config file exists: $file"
      #       echo NuGetFileName=$(basename $file) >> $GITHUB_OUTPUT
      #     else
      #       echo "NuGet config does not exist. Creating..."
      #       dotnet new nugetconfig --output ${{ github.workspace }}
      #       echo NuGetFileName=nuget.config >> $GITHUB_OUTPUT
      #     fi
      #   shell: bash

      # - name: Enable Skyline GitHub NuGet Registry
      #   if: inputs.owner == 'SkylineCommunications'
      #   run: dotnet nuget add source "https://nuget.pkg.github.com/SkylineCommunications/index.json" --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --configfile ${{ github.workspace }}/${{ steps.findOrCreateNuGetFile.outputs.NuGetFileName }}
      
  #     - name: dotnet restore
  #       run: dotnet restore

  #     - name: (Development) Upload artifact Package
  #       if: inputs.referenceType == 'branch'
  #       id: upload-step-development
  #       env:
  #         NUGET_PACKAGES: ${{ github.workspace }}/packages
  #       # uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action@UseReusableModuleNuGets
  #       uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action@v1
  #       with:
  #         # Stage upload
  #         stage: Upload
  #         # The API-key generated in the DCP Admin app as authentication for a certain DataMiner System. E.g. g597e77412e34297b827c2570a8fa2bc
  #         api-key: ${{ secrets.api-key }}
  #         # The path to the .sln file of the solution. Atm only DataMiner Automation Script solutions are supported. E.g ./Example/Script.sln.
  #         solution-path: ./SrmFunction.sln
  #         # The chosen name of the artifact. E.g. MyName.
  #         artifact-name: ${{ inputs.repository }} ${{ inputs.referenceName }}_B${{ inputs.runNumber }}
  #         # The version number for the artifact (format A.B.C.D). E.g. 1.0.1.1
  #         build-number: ${{ inputs.runNumber }}
  #     - name: (Development) Set artifact Id
  #       if: inputs.referenceType == 'branch'
  #       run: echo "result-artifact-id=${{ steps.upload-step-development.outputs.ARTIFACT_ID }}" >> $GITHUB_ENV
  #     - name: (Release) Upload artifact Package
  #       if: inputs.referenceType == 'tag'
  #       id: upload-step-release
  #       uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action@v1
  #       with:
  #         # Stage upload
  #         stage: Upload
  #         # The API-key generated in the DCP Admin app as authentication for a certain DataMiner System. E.g. g597e77412e34297b827c2570a8fa2bc
  #         api-key: ${{ secrets.api-key }}
  #         # The path to the .sln file of the solution. Atm only DataMiner Automation Script solutions are supported. E.g ./Example/Script.sln.
  #         solution-path: ./SrmFunction.sln
  #         # The chosen name of the artifact. E.g. MyName.
  #         artifact-name: ${{ env.GITHUB_REPOSITORY }} ${{ inputs.referenceName }}
  #         # The version number for the artifact (format A.B.C.D). E.g. 1.0.1.1
  #         version: ${{ inputs.referenceName }}
  #     - name: (Release) Set artifact Id
  #       if: inputs.referenceType == 'tag'
  #       run: echo "result-artifact-id=${{ steps.upload-step-release.outputs.ARTIFACT_ID }}" >> $GITHUB_ENV
  #     - name: Post Actions
  #       run: echo  ${{ steps.upload-step-development.outputs.ARTIFACT_ID }}